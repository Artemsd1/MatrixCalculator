#include "pch.h"
#include "CppUnitTest.h"
#include "../MatrixCalculator/Header.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace getNumbersFromRowTest
{
	TEST_CLASS(getNumbersFromRowTest)
	{
	public:
		//void getNumbersFromRow(Matrix* matr, vector<string> strArr)
		TEST_METHOD(typeTest)
		{
			vector<string> strArr = {"21,2,5", "12,5,67,787"};
			int exp[20][20] = { {21,2,5}, {12,5,67,787} };
			
			Matrix res;
			getNumbersFromRow(&res, strArr);

			for (int i = 0; i < res.height; i++)
				for (int j = 0; j < res.width; j++)
					Assert::AreEqual(exp[i][j], res.values[i][j]);
		}

		TEST_METHOD(maxCol)
		{
			vector<string> strArr = { "12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20" };
			int exp[20][20] = {{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20}};
			
			Matrix res;
			getNumbersFromRow(&res, strArr);

			for (int i = 0; i < res.height; i++)
				for (int j = 0; j < res.width; j++)
					Assert::AreEqual(exp[i][j], res.values[i][j]);
		}

		TEST_METHOD(minCol)
		{
			vector<string> strArr = { "12" };
			int exp[20][20] = { {12} };

			Matrix res;
			getNumbersFromRow(&res, strArr);

			for (int i = 0; i < res.height; i++)
				for (int j = 0; j < res.width; j++)
					Assert::AreEqual(exp[i][j], res.values[i][j]);
		}

		TEST_METHOD(maxRow)
		{
			vector<string> strArr = { "12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20"};
			int exp[20][20] = { {12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20}};

			Matrix res;
			getNumbersFromRow(&res, strArr);

			for (int i = 0; i < res.height; i++)
				for (int j = 0; j < res.width; j++)
					Assert::AreEqual(exp[i][j], res.values[i][j]);
		}

		TEST_METHOD(minRow)
		{
			vector<string> strArr = { "12"};
			int exp[20][20] = { {12} };

			Matrix res;
			getNumbersFromRow(&res, strArr);

			for (int i = 0; i < res.height; i++)
				for (int j = 0; j < res.width; j++)
					Assert::AreEqual(exp[i][j], res.values[i][j]);
		}

		TEST_METHOD(maxRowAndCol)
		{
			vector<string> strArr = { "12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20",
										"12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20", };
			int exp[20][20] = { {12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20},
								{12,5,67,787,3214,21,345,56,567,77,213,23,45,6,7,8,90,12,2,20}, };

			Matrix res;
			getNumbersFromRow(&res, strArr);

			for (int i = 0; i < res.height; i++)
				for (int j = 0; j < res.width; j++)
					Assert::AreEqual(exp[i][j], res.values[i][j]);
		}
	};
}
