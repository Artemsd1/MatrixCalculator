#include "pch.h"
#include "CppUnitTest.h"
#include "../MatrixCalculator/Header.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace matrixMulTest
{
	TEST_CLASS(matrixMulTest)
	{
	public:
		
		TEST_METHOD(TypeTest)
		{
			Matrix mat1{ {{1,2,3},{1,5,12}}};
			Matrix mat2{ {{1,2,3,10},{1,5,12,16},{1,2,3,10}}};

			int exp[2][4] = { {6,18,36,72}, {18,51,99,210} };

			Matrix res;
			matrixMul(&mat1, &mat2, &res);

			for (int i = 0; i < mat1.height; i++)
				for (int j = 0; j < mat2.width; j++)
					Assert::AreEqual(exp[i][j], res.values[i][j]);
		}

		TEST_METHOD(maxColNumbers)
		{
			Matrix mat1{ {1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21}};
			Matrix mat2{ {{10},{5},{12},{1},{5},{225},{8},{15},{95},{145},{136},{54},{25},{38},{15},{17},{13},{5},{23},{12}}};

			int exp[2][4] = { {71163} };

			Matrix res;
			matrixMul(&mat1, &mat2, &res);

			for (int i = 0; i < mat1.height; i++)
				for (int j = 0; j < mat2.width; j++)
					Assert::AreEqual(exp[i][j], res.values[i][j]);
		}

		TEST_METHOD(minColNumbers)
		{
			Matrix mat1{ {1}};
			Matrix mat2{ {{10}}};

			int exp[2][4] = { {10} };

			Matrix res;
			matrixMul(&mat1, &mat2, &res);

			for (int i = 0; i < mat1.height; i++)
				for (int j = 0; j < mat2.width; j++)
					Assert::AreEqual(exp[i][j], res.values[i][j]);
		}

		TEST_METHOD(maxColandRowNumbers)
		{
			Matrix mat1{ {{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
				{1,2,3,23,5,6,7,78,2,325,23,6,87,90,34,12,34,45,456,21},
			}};
			Matrix mat2{ {{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23},
				{1,2,3,10,5,60,7,66,12,12,33,56,1,234,54,6,7,89,12,23}}};

			int exp[20][20] = {
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980},
				{1260,2520,3780,12600,6300,75600,8820,83160,15120,15120,41580,70560,1260,294840,68040,7560,8820,112140,15120,28980}
			};

			Matrix res;
			matrixMul(&mat1, &mat2, &res);

			for (int i = 0; i < mat1.height; i++)
				for (int j = 0; j < mat2.width; j++)
					Assert::AreEqual(exp[i][j], res.values[i][j]);
		}
	};
}
